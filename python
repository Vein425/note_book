
# !!!!!


-> var_name = True
# creating a variable of boolean datatype

-> var_name2 = input()
# take string value from the user

-> print("hello your" + "  name is ", var_name)
# to print the value of variable 

-> power operator **	

-> intiger division operator //
# ignore decimal value only 

-> int(string_var)
# to changing string data type to integer

-> type(var_name)
# give the datatype of variable

-> 'hello' == 'Hello'
# comparing to string it gives False

-> conditions

if not(1==4 and 1!=2 or 4>=4):

	print("yes")	
	if 'm'=='m':
		print("inside")
   elif 2==2:
	print("only if first condition fails")
   else:
	print("if all condition fails")

-> for loop

for x in range (0,5,2):
	print(x)

-> while loop

 while i<5:
	print("infinite")
	i++

-> list = [2,"hello"]
# creating list 

-> print(list)
# printing list

-> print(list[0])
# print element in index 0 

-> list.append("element")
# adding item in last of the list

-> list[-1] = "last element"
# changing last element of list

-> tuple = ("one",2)
# creating a tuple

-> for fruit in fruit_list :
	print(fruit)

-> len(list_name)
# give the length of list

-> string_var.lower()
# to lower case the string of variable

-> string_var.upper()
# to upper case the string of variable

-> string_var.strip()
# remove tabs, spaces and \n from start and end

-> string_var.split('.')
# to split the character of string and for creating list of character sperating it with '.' delimter default is " "

-> len(string_var)
# no of character in string or length of string

-> len[2:2] = "something"
# it will put the value at givin index and all element will be shifted towards right

-> str_var[2:8:2]
# it will print the element from index 2 to 7 with a jump of 2

-> function
def fun_name(parameter_var, para_var='2'):
	return arguments + x

fun_name(argument_var)

-> var_name = open('filename.txt', 'r')
# to open the file in read mode

-> var_name.close()
# to close the file by using variable in which we open the file

-> var_name2 = file.readlines()
# to read all the lines from file

-> newlist.append(line[:-1])
# to remove last character from string 

-> var_name = open('filename.txt', 'w')
# opening file in write mode

-> var_name.write("ok\n")
# this will overwrite the existing data with new one
 
-> str_var.find('zd')
# it will give index of first occurance of that string -1 output means not find 

-> str_var.count('a')
# count number of a's come in the string

-> import module_name
# importing modules 

-> module_name.fun_name()
# to use any function inside the module

-> default parameter work in order 

-> try except

try:
	int(var_name)
	print(var_name)
except:
	print("en error occur try another value")

-> inside the function variable declare as local outside the function variable declare as global. local value can access only inside the function while global value can be access from anywhere to declare global variable inside the function or to change global variable inside the function we use : global var_name

-> variable are instance of classes. variables are object we use method of classes in our variable.

-> classes and object

class Class_name(object):
	def __init__(self, color):
		self.color = color
		print("run automatic after creating object", self.color)
obj_name = Class_name("blue")
print(obj_name.color)

-> inheritance	 # taking use of parrent class

class Class_name(Parrent_class):
	def __init__(self, color, name):
		self.name = "Vein"
		super().__init__(color)

-> can we use parrent class methods?

-> method overloading	 #changing built in modules
	
class Point():
	def __init__:
		self.x = x
		self.y = y
		self.coords = (self.x, self.y)

	def __gt__(self, p):
		return self.length() > p.length()

	def __str__(self):
		return "(" + str(self.x) + "," + str(self.y) + ")"
	
	def __len__(self):
		import math
		return math.sqrt(self.x**2 + self.y**2)
p1 = Point(3,4)
p2 = Point(2,1)

print(p1>p2)
print(len(p1))

-> static and class methods	
# class method must include class parameter cls while static method doesn't need to include self or cls

class Dog():
	dogs = []
	
	def __init__(self, name):
		self.name = name
		self.dogs.append(self)

	@class method
	def num_dogs(cls):
		return len(cls.dogs)

	@static method
	def bark(n):
		for _ in range(n):
			print("bark!")

print(Dog.num_dogs())
print(Dog.dogs)

-> Private and public class	# starting name with _ represent private 

class _Private():
	def __init__(self, name):
		self.name = name

class Not_Private():
	def __init__(self, name):
		self.name = name
		self.priv = _Private(name)

	def _display():
		print("hello")

	def display():
		print("hi")
---------------------------------------------
import mod
from mod import Not_Private

test = Not_Private("tim")
test._display() 

-> optional parameter

def func(word, add = 5, freq = 1):
	print(word*freq)

func("meow")

-> True = 1?

-> map function		# to use a function in every element of list

li = [1,2,3,4,5]

def func(x):
	return x**x

print(list(map(func,li)))

or

print([func(x) for x in li if x%2==0])

-> filter function	# to filter the list

def add7(x):
	return x+7

def isOdd(x):
	return x%2==0    # other than zero all value are true even strings

a = [1,2,3,4,5]
c = list(map(add7,filter(isOdd,a))
print(c)

-> lambda function

a = [1,2,3,4,5]
newlist = list(map(lambda x:x+5,a))
print(newlist)

-> Collections 		

import collections
from collections import Counter

a = Counter("gallad")
b = Counter(['a','b','b'])
c = Counter({'a':2,'b':1})
d = Counter(cats=2, dogs=4)

print(a,b,c,d)		# count the character and print in dictionary view

print(d['cats'])

print(list(d.elements()))
print(b.most_common(2))

e = Counter(a=4, b=2,c=0)
f = ['a','a','b','c']
e.subtract(f)
e.update(f)
e.clear()
print(e+f)
print(e-f)
print(e & f)	# min element 0 not shown
print(e | f)	# max element
print(e)

-> named tuples

import collections
from collections import namedtuple

Point = namedtuple("Point","x y z")

newp = Point(3,4,5)

print(newp.x,newp.y,newp.z)
print(newp._fields)

newp = newp._replace(x=4)
print(newp)

p2 = Point._make(['a','b','c'])
print(p2)

-> deque

import collections
from collections import deque

d = deque("hello",maxlen=5)
d.pop()
d.popleft()

d.clear()

d.extend('456')
d.extend([1,2,3])
d.extendleft("hey")

d.rotate(-2)

d.append(2)
